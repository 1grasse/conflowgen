from __future__ import annotations

import statistics

from conflowgen.posthoc_analyses.abstract_posthoc_analysis_report import AbstractPosthocAnalysisReport
from conflowgen.posthoc_analyses.quay_side_throughput_analysis import QuaySideThroughputAnalysis


class QuaySideThroughputAnalysisReport(AbstractPosthocAnalysisReport):
    """
    This analysis report takes the data structure as generated by :class:`.QuaySideThroughputAnalysis`
    and creates a comprehensible representation for the user, either as text or as a graph.
    """

    def __init__(self):
        super().__init__()
        self.analysis = QuaySideThroughputAnalysis(
            transportation_buffer=self.transportation_buffer
        )

    def get_report_as_text(self) -> str:

        used_quay_side_capacity_over_time = self.analysis.get_used_quay_side_capacity_over_time()
        if used_quay_side_capacity_over_time:
            used_quay_side_capacity_sequence = list(used_quay_side_capacity_over_time.values())
            maximum_used_quay_side_capacity = max(used_quay_side_capacity_sequence)
            average_used_quay_side_capacity = statistics.mean(used_quay_side_capacity_sequence)
            stddev_used_quay_side_capacity = statistics.stdev(used_quay_side_capacity_sequence)
        else:
            maximum_used_quay_side_capacity = average_used_quay_side_capacity = 0
            stddev_used_quay_side_capacity = -1

        # create string representation
        report = "\n"
        report += "                                     (reported in boxes)\n"
        report += f"maximum weekly quay side throughput:          {maximum_used_quay_side_capacity:>10}\n"
        report += f"average weekly quay side throughput:          {average_used_quay_side_capacity:>10.1f}\n"
        report += f"standard deviation:                           {stddev_used_quay_side_capacity:>10.1f}\n"
        report += f"maximum daily quay side throughput:           {(maximum_used_quay_side_capacity / 7):>10.1f}\n"
        report += f"average daily quay side throughput:           {(average_used_quay_side_capacity / 7):>10.1f}\n"
        report += f"maximum hourly quay side throughput:          {(maximum_used_quay_side_capacity / 168):>10.1f}\n"
        report += f"average hourly quay side throughput:          {(average_used_quay_side_capacity / 168):>10.1f}\n"
        report += "(daily and hourly values are simply scaled weekly values, rounding errors might exist)\n"

        return report

    def get_report_as_graph(self, **kwargs) -> object:
        """
        The report as a graph is represented as a line graph using pandas.

        Returns: The matplotlib axis of the bar chart.
        """

        import pandas as pd  # pylint: disable=import-outside-toplevel
        import seaborn as sns  # pylint: disable=import-outside-toplevel
        import matplotlib.pyplot as plt  # pylint: disable=import-outside-toplevel
        sns.set_palette(sns.color_palette())

        used_quay_side_capacity_over_time = self.analysis.get_used_quay_side_capacity_over_time()

        series = pd.Series(used_quay_side_capacity_over_time)
        ax = series.plot()
        plt.xticks(rotation=45)
        ax.set_xlabel("Date")
        ax.set_ylabel("Number of boxes (weekly count)")
        ax.set_title("Analysis of required quay side throughput")
        return ax
